

FUNCTIONS
---------

1) the keyword 'def' to inform Python that you’re defining a function. This is the function definition

(Rest Everything is similar just search in the google the function in python which is not hard to learn)


-> Using as to Give a Function an Alias
     - from pizza import make_pizza as mp



-> Keyword Arguments
    -  A keyword argument is a name-value pair that you pass to a function. 
    -  You directly associate the name and the value within the argument.
    Eg: describe_pet(animal_type='hamster', pet_name='harry')



-> Default Values
    - When writing a function, you can define a default value for each parameter
    - If an argument for a parameter is provided in the function call, Python uses the argument value. If not, it uses the parameter’s default value.
    Eg: 
    def describe_pet(pet_name, animal_type='dog'):
        """Display information about a pet."""
        print("\nI have a " + animal_type + ".")
        print("My " + animal_type + "'s name is " + pet_name.title() + ".")
    
    describe_pet(pet_name='willie')

    Note: 1) Here animal_type = 'dog' is the default value. Even if you are not passing any thing in the argument when you call the functiobn it considers it.
    2) But if you pass some argument inisde the function call for animal_type it takes the value from the function call and ignores the default value to it.



->* Passing an Arbitrary Number of Arguments

    - Sometimes you won’t know ahead of time how many arguments a function needs to accept. Fortunately, Python allows a function to collect an arbitrary 
        number of arguments from the calling statement.
    
    -* It considers 'tuple'

    Eg:
    def make_pizza(*toppings):
        """Print the list of toppings that have been requested."""
        print(toppings)
    
    make_pizza('pepperoni')
    make_pizza('mushrooms', 'green peppers', 'extra cheese')

    -* The asterisk in the parameter name *toppings tells Python to make an empty tuple called toppings and pack whatever values it receives into this tuple.

    -> Mixing Positional and Arbitrary Arguments
        - If you want a function to accept several different kinds of arguments, the parameter that accepts an arbitrary number of arguments must be placed
        last in the function definition. Python matches positional and keyword arguments first and then collects any remaining arguments in the final parameter.

        Eg:
        def make_pizza(size, *toppings):
            """Summarize the pizza we are about to make."""
            print("\nMaking a " + str(size) + "-inch pizza with the following toppings:")
            for topping in toppings:
                print("- " + topping)

        make_pizza(16, 'pepperoni')
        make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')

        -> Using Arbitrary Keyword Arguments
            - you know you’ll get information about a user, but you’re not sure what kind of information you’ll receive
            Eg:
            def build_profile(first, last, **user_info):
                """Build a dictionary containing everything we know about a user."""
                profile = {}
                profile['first_name'] = first
                profile['last_name'] = last
                for key, value in user_info.items():
                    profile[key] = value
                return profile
            
            user_profile = build_profile('albert', 'einstein',location='princeton',field='physics')

            print(user_profile)

            result - > {'first_name': 'albert', 'last_name': 'einstein','location': 'princeton', 'field': 'physics'}


    Note: 
    1) * is used in the arbitrary arguments without keyword to make an empty tuple
    2) ** is used in the arbitrary arguments is with keyword. The reason is because the double star allows us to pass through keyword arguments.
